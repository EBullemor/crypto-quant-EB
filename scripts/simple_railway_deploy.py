#!/usr/bin/env python3
"""
Simple Railway Deployment for Crypto Quant Bot
Uses existing Railway configuration for 24/7 cloud deployment
"""

import os
import sys
import subprocess
from datetime import datetime

def check_git():
    """Check if git is available."""
    try:
        result = subprocess.run(['git', '--version'], capture_output=True, text=True)
        return result.returncode == 0
    except FileNotFoundError:
        return False

def setup_environment():
    """Set up environment variables for Railway deployment."""
    print("üîß Setting up environment variables...")
    
    env_vars = {
        "ALPACA_API_KEY": "PKJYFI6XVZ9UGW85JFVP",
        "ALPACA_SECRET_KEY": "HY2qdRNAX8TSONDcnsqPfNHUp7WzpeHzpsAdNEGZ",
        "ALPACA_PAPER": "true",
        "DRY_RUN": "false",
        "USE_FUTURES": "true",
        "UPDATE_INTERVAL_MINUTES": "10",
        "TRADING_SYMBOLS": "BTCUSD,ETHUSD,SOLUSD,ADAUSD",
        "MAX_PORTFOLIO_ALLOCATION": "0.60",
        "MAX_NET_EXPOSURE": "0.20",
        "MAX_GROSS_LEVERAGE": "1.8",
        "MAX_SINGLE_POSITION": "0.06",
        "MAX_DAILY_DRAWDOWN": "0.15",
        "MAX_WEEKLY_DRAWDOWN": "0.25",
        "POSITION_SIZING_METHOD": "KELLY_OPTIMAL",
        "ENABLE_EMAIL_NOTIFICATIONS": "true",
        "EMAIL_RECIPIENT": "ebullemor@gmail.com",
        "DIGEST_INTERVAL_HOURS": "24",
        "TRADE_NOTIFICATIONS": "true",
        "DAILY_SUMMARY": "true",
        "LOG_LEVEL": "INFO",
        "ENABLE_HEALTH_CHECKS": "true",
        "PERFORMANCE_MONITORING": "true",
        "RISK_MONITORING": "true",
        "POSITION_TRACKING": "true",
        "SIGNAL_MONITORING": "true"
    }
    
    # Create .env file for Railway
    with open(".env", "w") as f:
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print("‚úÖ Environment variables saved to .env file")

def create_deployment_guide():
    """Create deployment guide."""
    guide = f"""
üöÄ CRYPTO QUANT BOT - RAILWAY DEPLOYMENT GUIDE
{'=' * 60}

üìÖ Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
üåê Platform: Railway Cloud
üìß Email Reports: ebullemor@gmail.com
üîÑ Operation: 24/7 (True cloud deployment)

‚úÖ CONFIGURATION READY:
‚Ä¢ Railway configuration: railway.toml ‚úÖ
‚Ä¢ Requirements: requirements-railway.txt ‚úÖ
‚Ä¢ Environment variables: .env ‚úÖ
‚Ä¢ Dockerfile: Dockerfile ‚úÖ

üìä TRADING CONFIGURATION:
‚Ä¢ Symbols: BTCUSD, ETHUSD, SOLUSD, ADAUSD
‚Ä¢ Max Net Exposure: 20%
‚Ä¢ Max Gross Leverage: 1.8
‚Ä¢ Max Single Position: 6%
‚Ä¢ Daily Drawdown Limit: 15%

üéØ PERFORMANCE TARGETS:
‚Ä¢ Monthly Return: 15%
‚Ä¢ Max Drawdown: 25%
‚Ä¢ Sharpe Ratio: 0.8
‚Ä¢ Win Rate: 55%

üìß EMAIL NOTIFICATIONS:
‚Ä¢ Daily Trade Summaries: 6:00 PM UTC
‚Ä¢ Individual Trade Alerts: Enabled
‚Ä¢ Risk Alerts: Enabled
‚Ä¢ Performance Reports: Daily

üõ°Ô∏è RISK MANAGEMENT:
‚Ä¢ Real-time exposure monitoring
‚Ä¢ Automatic position sizing
‚Ä¢ Drawdown protection
‚Ä¢ Correlation monitoring

üìã DEPLOYMENT STEPS:
1. Install Railway CLI: npm install -g @railway/cli
2. Login to Railway: railway login
3. Initialize project: railway init
4. Deploy: railway up
5. Monitor: railway logs

üåê ALTERNATIVE DEPLOYMENT:
If Railway CLI is not available, you can:
1. Go to https://railway.app
2. Create new project
3. Connect your GitHub repository
4. Railway will auto-deploy using existing config

üìã MONITORING COMMANDS:
‚Ä¢ Check status: railway status
‚Ä¢ View logs: railway logs
‚Ä¢ Update deployment: railway up
‚Ä¢ Access dashboard: railway dashboard

---
Generated by Crypto Quant Bot Railway Deployment
"""
    
    with open("RAILWAY_DEPLOYMENT_GUIDE.md", "w") as f:
        f.write(guide)
    
    print("‚úÖ Deployment guide saved to RAILWAY_DEPLOYMENT_GUIDE.md")

def check_railway_files():
    """Check if all Railway files are present."""
    required_files = [
        "railway.toml",
        "requirements-railway.txt", 
        "Dockerfile",
        "scripts/run_live_bot.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Missing Railway files:")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        return False
    else:
        print("‚úÖ All Railway files present")
        return True

def main():
    """Main deployment preparation function."""
    print("üéØ RAILWAY CLOUD DEPLOYMENT PREPARATION")
    print("=" * 60)
    print("Preparing your bot for Railway cloud deployment")
    print("This will enable true 24/7 operation!")
    print()
    
    # Check Railway files
    if not check_railway_files():
        print("‚ùå Please ensure all Railway files are present")
        return False
    
    # Setup environment
    setup_environment()
    
    # Create deployment guide
    create_deployment_guide()
    
    print()
    print("üéâ DEPLOYMENT PREPARATION COMPLETE!")
    print("=" * 40)
    print("‚úÖ Your bot is ready for Railway deployment")
    print("üìß Daily reports will be sent to: ebullemor@gmail.com")
    print("üîÑ Bot will run 24/7 in the cloud")
    print()
    
    print("üìã NEXT STEPS:")
    print("1. Install Railway CLI: npm install -g @railway/cli")
    print("2. Login to Railway: railway login")
    print("3. Deploy: railway up")
    print("4. Monitor: railway logs")
    print()
    
    print("üåê ALTERNATIVE:")
    print("‚Ä¢ Go to https://railway.app")
    print("‚Ä¢ Create new project")
    print("‚Ä¢ Connect your GitHub repository")
    print("‚Ä¢ Railway will auto-deploy using existing config")
    print()
    
    print("üìñ See RAILWAY_DEPLOYMENT_GUIDE.md for detailed instructions")
    
    return True

if __name__ == "__main__":
    main()
